//! Протокол HTTP

// Перед тим як користувач побачить вміст сайту на екрані, браузер робить запит на сервер, щоб отримати цей вміст. HTML-файл, зображення, стилі і скрипти приходять з сервера по HTTP протоколу - набору правил і домовленостей, що використовуються при передачі даних в мережі.

// HyperText Transfer Protocol (протокол передачі гіпертексту) - широко розповсюджений протокол для передачі веб-ресурсів різних типів: html, css, javascript, зображень, аудіо та відео тощо.

// HTTP ґрунтується на структурі клієнт-сервер і моделі запит-відповідь, в якій клієнтський застосунок ініціює з'єднання, формує запит і відправляє його на сервер, після чого сервер обробляє цей запит, формує відповідь і передає її назад клієнтові. Зв'язок між ними здійснюється за допомогою низки перемежованих HTTP-запитів і HTTP-відповідей.

// Запит відбувається у кілька етапів:

// DNS-запит - пошук найближчого DNS-сервера, щоб перетворити адресу (наприклад
// google.com) в її числове вираження, IP-адресу (74.125.87.99).
// З'єднання - встановлення з'єднання з сервером за отриманою IP-адресою.
// Передача даних - пересилання пакетів з клієнта на сервер.
// Очікування відповіді - очікування, доки пакети даних дійдуть до сервера, він їх обробить і відповідь повернеться назад.
// Отримання даних - пакети надійшли, можна отримувати з них дані.
// Протокол HTTPS​

// HyperText Transfer Protocol Secure - це налаштування над протоколом HTTP, в якій всі повідомлення між клієнтом і сервером шифруються з метою підвищення безпеки. Забезпечує захист від атак, що базуються на прослуховуванні з'єднання. Дані передаються поверх криптографічних протоколів SSL або TLS.

//! Пагінація

// База даних може зберігати колекції, що містять сотні мільйонів записів. Тому повертати всю колекцію на кожен GET-запит - занадто ресурсозатратно. Розмір тіла відповіді буде занадто великий, і час запиту затягнеться на десятки секунд, або навіть хвилини - чим більше даних у відповіді від бекенду, тим довше вона передається мережею.

// До того ж, необхідно думати про користувачів - навряд чи їм потрібні усі мільйони записів відразу. Обробка такої великої кількості даних у відповіді і відображення інтерфейсу потребує величезних ресурсів пристрою, на якому переглядається веб-сторінка. За статистикою, користувачі знаходять цікаву для них інформацію на декількох перших екранах.

// Припустимо наш бекенд my-api.com зберігає дуже велику колекцію постів у ресурсі /posts, яку зобразимо дванадцятьма елементами на ілюстрації.
