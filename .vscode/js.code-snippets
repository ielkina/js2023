{
  "use strict": {
    "prefix": "use",
    "scope": "javascript",
    "body": [
      "\"use strict\";\r"
    ],
    "description": "use strict строгий режим"
  },
  //! const, log, table, dir
  "const ru": {
    "prefix": "сщтые",
    "scope": "javascript",
    "body": [
      "const $1"
    ],
    "description": "const"
  },
  "const": {
    "prefix": "c",
    "scope": "javascript",
    "body": [
      "const $1"
    ],
    "description": "const"
  },
  "console.log();": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log($1);\r$2"
    ],
    "description": "console.log();"
  },
  "console.log(); ru": {
    "prefix": "дщп",
    "scope": "javascript",
    "body": [
      "console.log($1);\r$2"
    ],
    "description": "console.log();"
  },
  "console.log('');": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log('$1');\r$2"
    ],
    "description": "console.log('');"
  },
  "console.log(``);": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log(`$1`);\r$2"
    ],
    "description": "console.log(``);"
  },
  "console.log(\"\");": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log(\"$1\");\r$2"
    ],
    "description": "console.log(\"\");"
  },
  "console.table();": {
    "prefix": "tab",
    "scope": "javascript",
    "body": [
      "console.table($1);\r$2"
    ],
    "description": "console.table();"
  },
  "console.dir()": {
    "prefix": "dir",
    "scope": "javascript",
    "body": [
      "console.dir($1);\r$2"
    ],
    "description": "console.dir();"
  },
  //! Функции
  "function name(params){}; name();": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "function ${1:name}(${2:params}){\r",
      "$3",
      "};\r",
      "\r",
      "${1:name}();"
    ],
    "description": "function declaration"
  },
  "function name(){};": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "function ${1:name}($3){$4};\r"
    ],
    "description": "function declaration"
  },
  "function(){};": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "function($1){$2};\r"
    ],
    "description": "function"
  },
  "символы ()=>{};": {
    "prefix": ".(",
    "scope": "javascript",
    "body": [
      "($1)=>{$2}"
    ],
    "description": "function (callback)=>{}"
  },
  "символы (){};": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "($1){$2};"
    ],
    "description": "(){}"
  },
  //! addEventListener
  "addEventListener('event',);": {
    "prefix": ".add",
    "scope": "javascript",
    "body": [
      ".addEventListener('${1:event}', $2);\r$3"
    ],
    "description": "addEventListener ('event',)"
  },
  "removeEventListener('event',);": {
    "prefix": ".remov",
    "scope": "javascript",
    "body": [
      ".removeEventListener('${1:event}', $2);\r$3"
    ],
    "description": "removeEventListener('event',)"
  },
  "addEventListener('event',()=>{});": {
    "prefix": ".add",
    "scope": "javascript",
    "body": [
      ".addEventListener('${1:event}',($2)=>{$3});"
    ],
    "description": "addEventListener ('event',()=>{})"
  },
  "document.addEventListener();": {
    "prefix": "docadd",
    "scope": "javascript",
    "body": [
      "document.addEventListener($1);\r$2"
    ],
    "description": "document.addEventListener();"
  },
  //! querySelector
  "document.querySelector();": {
    "prefix": "docq",
    "scope": "javascript",
    "body": [
      "document.querySelector($1);\r$2"
    ],
    "description": "document.querySelector();"
  },
  "document.querySelectorAll();": {
    "prefix": "docq",
    "scope": "javascript",
    "body": [
      "document.querySelectorAll($1);\r$2"
    ],
    "description": "document.querySelectorAll();"
  },
  //! createElement
  "document.createElement('');": {
    "prefix": "docre",
    "scope": "javascript",
    "body": [
      "document.createElement('$1');\r$2"
    ],
    "description": "document.createElement('');"
  },
  //! методы
  "reduce": {
    "prefix": ".red",
    "scope": "javascript",
    "body": [
      ".reduce(($1)=>{$2}, 0)"
    ],
    "description": "reduce 0"
  },
  //!
  "import": {
    "prefix": "import",
    "scope": "javascript",
    "body": [
      "import $1 from \"../$2\";\r$3"
    ],
    "description": "import"
  },
  "import * as": {
    "prefix": "import",
    "scope": "javascript",
    "body": [
      "import * as from \"../$1\";\r$2"
    ],
    "description": "import"
  },
  "class": {
    "prefix": "clas",
    "scope": "javascript",
    "body": [
      "class ${1:Parent} {$2}"
    ],
    "description": "class"
  },
  "constructor(){};": {
    "prefix": "const",
    "scope": "javascript",
    "body": [
      "constructor(){\n$1\n};"
    ],
    "description": "constructor function"
  },
  "js arrow reduce, 0": {
    "prefix": "arr",
    "scope": "javascript",
    "body": [
      "((${1:item}, ${2:item})=>{$3},0)"
    ],
    "description": "js arrow reduce, 0"
  },
  "destructuring object": {
    "prefix": "dest{}",
    "scope": "javascript",
    "body": [
      "const { key$1 } = object$2;"
    ],
    "description": "destructuring"
  },
  "destructuring array": {
    "prefix": "dest[]",
    "scope": "javascript",
    "body": [
      "const [index$1] = array$2;"
    ],
    "description": "destructuring"
  },
  "quantity word": {
    "prefix": "qua",
    "scope": "javascript",
    "body": [
      "quantity"
    ],
    "description": "quantity word"
  },
  "constructor": {
    "prefix": "constr",
    "scope": "javascript",
    "body": [
      "constructor({$1}={}){$2}"
    ],
    "description": "constructor"
  },
  "constructor super": {
    "prefix": "super",
    "scope": "javascript",
    "body": [
      "  constructor({ $1, ...restProps } = {}) {\r",
      "    super(restProps);\r",
      "    this.$1 = $1;\r",
      "  }"
    ],
    "description": "constructor super"
  },
  "for": {
    "prefix": "for",
    "scope": "javascript",
    "body": [
      "for (let i = 0; i < cart.length; i++) {\r",
      "}\r",
      "console.log(cart);"
    ],
    "description": "for"
  },
  "for...of": {
    "prefix": "forof",
    "scope": "javascript",
    "body": [
      "for (const item$1 of items$2) {\r",
      "  console.log(item$1);\r",
      "}"
    ],
    "description": "for...of"
  },
  "for..of": {
    "prefix": "for",
    "scope": "javascript",
    "body": [
      "for (const $1 of $2) {\r",
      "  console.log($3);\r",
      "}"
    ],
    "description": "for...of"
  },
  "constructor this": {
    "prefix": "conthis",
    "scope": "javascript",
    "body": [
      " constructor($1) {\r",
      "  this.${1:text} = $1\r",
      " }"
    ],
    "description": "constructor this"
  },
  "for...ite": {
    "prefix": "fori",
    "scope": "javascript",
    "body": [
      "for (let i = 0; i < ${1:array}.length; i += 1) {\r",
      "  const element = $1[i];\r",
      "}"
    ],
    "description": "for...iter"
  },
  "for...iter": {
    "prefix": "fori",
    "scope": "javascript",
    "body": [
      "for (let i = 0; i < array$1.length; i += 1) {\r",
      "  const element = array$2[i];\r",
      "}"
    ],
    "description": "for...iter"
  },
  "class extends наследование": {
    "prefix": "ext",
    "scope": "javascript",
    "body": [
      "class ${1:Child} extends ${2:Parent }{\r",
      "   constructor({$3, $4}={}) {\r",
      "    super($4);\r",
      "    this.$3 = $3\r",
      "   }\r",
      "}"
    ],
    "description": "class extends"
  },
  "target PointerEvent": {
    "prefix": "nodeName",
    "scope": "javascript",
    "body": [
      "nodeName"
    ],
    "description": "PointerEvent"
  },
  "classList": {
    "prefix": "classList",
    "scope": "javascript",
    "body": [
      "classList"
    ],
    "description": "classList"
  },
}