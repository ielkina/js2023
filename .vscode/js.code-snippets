{
  "use strict": {
    "prefix": "use",
    "scope": "javascript",
    "body": [
      "\"use strict\";\r"
    ],
    "description": "use strict строгий режим"
  },
  //! const, log, table, dir
  "const ru": {
    "prefix": "сщтые",
    "scope": "javascript",
    "body": [
      "const $1"
    ],
    "description": "const"
  },
  "const": {
    "prefix": "c",
    "scope": "javascript",
    "body": [
      "const $1"
    ],
    "description": "const"
  },
  "console.log();": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log($1);\r$2"
    ],
    "description": "console.log();"
  },
  "console.log(); ru": {
    "prefix": "дщп",
    "scope": "javascript",
    "body": [
      "console.log($1);\r$2"
    ],
    "description": "console.log();"
  },
  "console.log('');": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log('$1');\r$2"
    ],
    "description": "console.log('');"
  },
  "console.log(``);": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log(`$1`);\r$2"
    ],
    "description": "console.log(``);"
  },
  "console.log(\"\");": {
    "prefix": "log",
    "scope": "javascript",
    "body": [
      "console.log(\"$1\");\r$2"
    ],
    "description": "console.log(\"\");"
  },
  "console.table();": {
    "prefix": "tab",
    "scope": "javascript",
    "body": [
      "console.table($1);\r$2"
    ],
    "description": "console.table();"
  },
  "console.dir()": {
    "prefix": "dir",
    "scope": "javascript",
    "body": [
      "console.dir($1);\r$2"
    ],
    "description": "console.dir();"
  },
  //! Функции
  "function name(params){}; name();": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "function ${1:name}(${2:params}){\r",
      "$3",
      "};\r",
      "\r",
      "${1:name}();"
    ],
    "description": "function declaration"
  },
  "function name(){};": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "function ${1:name}($3){\r",
      "$4",
      "};\r"
    ],
    "description": "function declaration"
  },
  "function(){};": {
    "prefix": "fn",
    "scope": "javascript",
    "body": [
      "function($1){$2};\r"
    ],
    "description": "function"
  },
  "()=>{};": {
    "prefix": "fn()=>{}",
    "scope": "javascript",
    "body": [
      "($1)=>{$2}"
    ],
    "description": "function (callback)=>{}"
  },
  "(){};": {
    "prefix": "fn(){}",
    "scope": "javascript",
    "body": [
      "($1){$2};"
    ],
    "description": "(){}"
  },
  //! addEventListener
  "addEventListener('event',);": {
    "prefix": ".add",
    "scope": "javascript",
    "body": [
      ".addEventListener('${1:event}', $2);\r$3"
    ],
    "description": "addEventListener ('event',)"
  },
  "removeEventListener('event',);": {
    "prefix": ".remov",
    "scope": "javascript",
    "body": [
      ".removeEventListener('${1:event}', $2);\r$3"
    ],
    "description": "removeEventListener('event',)"
  },
  "addEventListener('event',()=>{});": {
    "prefix": ".add",
    "scope": "javascript",
    "body": [
      ".addEventListener('${1:event}',($2)=>{$3});"
    ],
    "description": "addEventListener ('event',()=>{})"
  },
  "document.addEventListener();": {
    "prefix": "docadd",
    "scope": "javascript",
    "body": [
      "document.addEventListener($1);\r$2"
    ],
    "description": "document.addEventListener();"
  },
  //! querySelector
  "document.querySelector();": {
    "prefix": "docq",
    "scope": "javascript",
    "body": [
      "document.querySelector($1);\r$2"
    ],
    "description": "document.querySelector();"
  },
  "document.querySelectorAll();": {
    "prefix": "docq",
    "scope": "javascript",
    "body": [
      "document.querySelectorAll($1);\r$2"
    ],
    "description": "document.querySelectorAll();"
  },
  //! createElement
  "document.createElement('');": {
    "prefix": "docre",
    "scope": "javascript",
    "body": [
      "document.createElement('$1');\r$2"
    ],
    "description": "document.createElement('');"
  },
  //! методы
  "reduce": {
    "prefix": ".red",
    "scope": "javascript",
    "body": [
      ".reduce(($1)=>{$2}, 0)"
    ],
    "description": "reduce 0"
  },
  //!
  "import": {
    "prefix": "import",
    "scope": "javascript",
    "body": [
      "import $1 from \"../$2\";\r$3"
    ],
    "description": "import"
  },
  "import * as": {
    "prefix": "import",
    "scope": "javascript",
    "body": [
      "import * as from \"../$1\";\r$2"
    ],
    "description": "import"
  },
  "class": {
    "prefix": "clas",
    "scope": "javascript",
    "body": [
      "class ${1:Parent} {$2}"
    ],
    "description": "class"
  },
  "constructor(){};": {
    "prefix": "const",
    "scope": "javascript",
    "body": [
      "constructor(){\n$1\n};"
    ],
    "description": "constructor function"
  },
  "js arrow reduce, 0": {
    "prefix": "arr",
    "scope": "javascript",
    "body": [
      "((${1:item}, ${2:item})=>{$3},0)"
    ],
    "description": "js arrow reduce, 0"
  },
  "destructuring object": {
    "prefix": "dest{}",
    "scope": "javascript",
    "body": [
      "const { key$1 } = object$2;"
    ],
    "description": "destructuring"
  },
  "destructuring array": {
    "prefix": "dest[]",
    "scope": "javascript",
    "body": [
      "const [index$1] = array$2;"
    ],
    "description": "destructuring"
  },
  "quantity word": {
    "prefix": "qua",
    "scope": "javascript",
    "body": [
      "quantity"
    ],
    "description": "quantity word"
  },
  "constructor": {
    "prefix": "constr",
    "scope": "javascript",
    "body": [
      "constructor({$1}={}){$2}"
    ],
    "description": "constructor"
  },
  "constructor super": {
    "prefix": "super",
    "scope": "javascript",
    "body": [
      "  constructor({ $1, ...restProps } = {}) {\r",
      "    super(restProps);\r",
      "    this.$1 = $1;\r",
      "  }"
    ],
    "description": "constructor super"
  },
  "for": {
    "prefix": "for",
    "scope": "javascript",
    "body": [
      "for (let i = 0; i < cart.length; i++) {\r",
      "}\r",
      "console.log(cart);"
    ],
    "description": "for"
  },
  "for...of": {
    "prefix": "forof",
    "scope": "javascript",
    "body": [
      "for (const item$1 of items$2) {\r",
      "  console.log(item$1);\r",
      "}"
    ],
    "description": "for...of"
  },
  "for..of": {
    "prefix": "for",
    "scope": "javascript",
    "body": [
      "for (const $1 of $2) {\r",
      "  console.log($3);\r",
      "}"
    ],
    "description": "for...of"
  },
  "constructor this": {
    "prefix": "conthis",
    "scope": "javascript",
    "body": [
      " constructor($1) {\r",
      "  this.${1:text} = $1\r",
      " }"
    ],
    "description": "constructor this"
  },
  "for...ite": {
    "prefix": "fori",
    "scope": "javascript",
    "body": [
      "for (let i = 0; i < ${1:array}.length; i += 1) {\r",
      "  const element = $1[i];\r",
      "}"
    ],
    "description": "for...iter"
  },
  "for...iter": {
    "prefix": "fori",
    "scope": "javascript",
    "body": [
      "for (let i = 0; i < array$1.length; i += 1) {\r",
      "  const element = array$2[i];\r",
      "}"
    ],
    "description": "for...iter"
  },
  "class extends наследование": {
    "prefix": "ext",
    "scope": "javascript",
    "body": [
      "class ${1:Child} extends ${2:Parent }{\r",
      "   constructor({$3, $4}={}) {\r",
      "    super($4);\r",
      "    this.$3 = $3\r",
      "   }\r",
      "}"
    ],
    "description": "class extends"
  },
  //! Поис элементов из обьекта PointerEvent 
  "nodeName": {
    "prefix": "nodeName",
    "scope": "javascript",
    "body": [
      "nodeName"
    ],
    "description": "nodeName"
  },
  "classList": {
    "prefix": "classList",
    "scope": "javascript",
    "body": [
      "classList"
    ],
    "description": "classList"
  },
  "parentNode": {
    "prefix": "parentNode",
    "scope": "javascript",
    "body": [
      "parentNode"
    ],
    "description": "parentNode"
  },
  "currentTarget": {
    "prefix": "currentTarget",
    "scope": "javascript",
    "body": [
      "currentTarget"
    ],
    "description": "currentTarget"
  },
  //! Методы
  "Метод contains": {
    "prefix": ".contains",
    "scope": "javascript",
    "body": [
      ".contains"
    ],
    "description": "Метод  проверки наличия определенного значения в строке или массиве. Возвращает true или false"
  },
  "Метод closest": {
    "prefix": ".closest",
    "scope": "javascript",
    "body": [
      ".closest"
    ],
    "description": "Метод поиска искомого эл у найближайшего(родительского) элемента. К примеру closest из вложенности до родительского элемента ищет ближайший элемент с классом .color-card."
  },
  // module
  // "Require to Const": {
  //   "prefix": "rqr",
  //   "body": "const ${2:module} = require('${1:package}');$0",
  //   "description": "Require a package to const"
  // },
  // "module.exports": {
  //   "prefix": "mde",
  //   "body": "module.exports = $0;\n",
  //   "description": "Module exports from Common JS"
  // },
  // "import default": {
  //   "prefix": "imp",
  //   "body": "import ${2:module} from '${1:package}';$0",
  //   "description": "Import default from module"
  // },
  // "import module from 'node:package'": {
  //   "prefix": "imb",
  //   "body": "import ${2:module} from 'node:${1:package}';$0",
  //   "description": "Import default from node builtin module"
  // },
  // "import ''": {
  //   "prefix": "imn",
  //   "body": "import '${1:module}';$0",
  //   "description": "Import default from module without module name"
  // },
  // "import { }": {
  //   "prefix": "imd",
  //   "body": "import { $2 } from '${1:module}';$0",
  //   "description": "Import only a portion of the module"
  // },
  // "import json": {
  //   "prefix": "imj",
  //   "body": "import ${2:obj} from '${1:path}' assert { type: 'json' };$0",
  //   "description": "Import object from a json module"
  // },
  // "import type { }": {
  //   "prefix": "imt",
  //   "body": "import type { $2 } from '${1:module}';$0",
  //   "description": "Import type from the module"
  // },
  // "import *": {
  //   "prefix": "ime",
  //   "body": "import * as ${2:alias} from '${1:module}';$0",
  //   "description": "Import everything as alias from the module"
  // },
  // "import alias": {
  //   "prefix": "ima",
  //   "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
  //   "description": "Import a specific portion of the module by assigning a local alias"
  // },
  // "Export Default Variable": {
  //   "prefix": "edv",
  //   "body": "export default ${1:${TM_FILENAME_BASE}};\n",
  //   "description": "Export default variable in ES6 syntax"
  // },
  // "Export Part": {
  //   "prefix": "ept",
  //   "body": "export { $0 };\n",
  //   "description": "Export part in ES6 syntax"
  // },
  // "Export Default Function": {
  //   "prefix": "edf",
  //   "body": "export default function ${1:${TM_FILENAME_BASE}}($2) {\n\t$0\n}\n",
  //   "description": "Export default function in ES6 syntax"
  // },
  // "Export Class": {
  //   "prefix": "ecl",
  //   "body": "export default class ${1:className} {\n\t$0\n};\n",
  //   "description": "Export default class in ES6 syntax"
  // },
  // // functions
  // "function": {
  //   "prefix": "fn",
  //   "body": "function ${1:name}($2) {\n\t$0\n}\n",
  //   "description": "Define a function"
  // },
  // "async function": {
  //   "prefix": "afn",
  //   "body": "async function ${1:name}($2) {\n\t$0\n}\n",
  //   "description": "Define an async function"
  // },
  // "Const Named Function": {
  //   "prefix": "nfn",
  //   "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
  //   "description": "Creates a named function in ES6 syntax"
  // },
  // "Immediately Invoked Function Expression": {
  //   "prefix": "iife",
  //   "body": "(function () {\n\t$0\n})();\n",
  //   "description": "Create immediately invoked function expression"
  // },
  // "Async Main Function": {
  //   "prefix": "main",
  //   "body": "async function main() {\n\t$0\n}\n\nmain();",
  //   "description": "Async main function"
  // },
  // comments
  // "Type Doc Comment": {
  //   "prefix": "@type",
  //   "body": [
  //     "/** @type {$1} */$0"
  //   ],
  //   "description": "Type doc comment"
  // },
  // "Ignore Prettier Comment": {
  //   "prefix": "prettier-ignore",
  //   "body": "// prettier-ignore$0",
  //   "description": "Ignore prettier comment"
  // },
  // "Eslint Disable Comment": {
  //   "prefix": "eslint-disable",
  //   "body": "/* eslint-disable$0 */",
  //   "description": "Eslint disable comment"
  // },
  // "constructor": {
  //   "prefix": "con",
  //   "body": "constructor(${1:params}) {\n\t${0}\n}",
  //   "description": "Add default constructor in a class in ES6 syntax"
  // },
  // "Destructing Object": {
  //   "prefix": "dob",
  //   "body": "const { ${2:propertyName} } = ${1:objectToDestruct};",
  //   "description": "Creates and assigns a local variable using object destructing"
  // },
  // "Destructing Array": {
  //   "prefix": "dar",
  //   "body": "const [ ${2:propertyName} ] = ${1:arrayToDestruct};",
  //   "description": "Creates and assigns a local variable using array destructing"
  // },
  // "Use Strict": {
  //   "prefix": "ust",
  //   "body": [
  //     "'use strict';$0"
  //   ],
  //   "description": "Use strict mode"
  // },
  // // React
  // "Create react function component and default export": {
  //   "scope": "typescriptreact",
  //   "prefix": "rfce",
  //   // prettier-ignore
  //   "body": [
  //     "interface ${1:ComponentName}Props {",
  //     "\t$2",
  //     "}",
  //     "",
  //     "export default function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
  //     "\treturn <div className=\"$4\">$0</div>",
  //     "}\n"
  //   ],
  //   "description": "Create react function component and default export"
  // },
  // "Create react function component": {
  //   "scope": "typescriptreact",
  //   "prefix": "rfc",
  //   // prettier-ignore
  //   "body": [
  //     "interface ${1:ComponentName}Props {",
  //     "\t$2",
  //     "}",
  //     "",
  //     "function ${1:ComponentName}({ $3 }: ${1:ComponentName}Props) {",
  //     "\treturn <div className=\"$4\">$0</div>",
  //     "}\n"
  //   ],
  //   "description": "Create react function component"
  // },
  // // log
  // "consoleAssert": {
  //   "prefix": "cas",
  //   "body": "console.assert(${1:expression}, '$0');",
  //   "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  // },
  // "consoleClear": {
  //   "prefix": "ccl",
  //   "body": "console.clear();",
  //   "description": "Clears the console"
  // },
  // "consoleCount": {
  //   "prefix": "cco",
  //   "body": "console.count(${1:label});",
  //   "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  // },
  // "consoleDebug": {
  //   "prefix": "cdb",
  //   "body": "console.debug($0);",
  //   "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
  // },
  // "consoleDir": {
  //   "prefix": "cdi",
  //   "body": "console.dir(${1:object});",
  //   "description": "Prints a JavaScript representation of the specified object"
  // },
  // "consoleError": {
  //   "prefix": "cer",
  //   "body": "console.error(${1:error});",
  //   "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  // },
  // "consoleGroup": {
  //   "prefix": "cgr",
  //   "body": "console.group('${1:label}');",
  //   "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  // },
  // "consoleGroupEnd": {
  //   "prefix": "cge",
  //   "body": "console.groupEnd();",
  //   "description": "Closes out the corresponding console.group()."
  // },
  // "consoleLog": {
  //   "prefix": "clg",
  //   "body": "console.log($0);",
  //   "description": "Displays a message in the console"
  // },
  // "consoleLogProperty": {
  //   "prefix": "clp",
  //   "body": "console.log({ ${1:variable} });",
  //   "description": "Console log a variable using object property shorthand syntax"
  // },
  // "consoleTrace": {
  //   "prefix": "ctr",
  //   "body": "console.trace('$0');",
  //   "description": "Prints a stack trace from the point where the method was called"
  // },
  // "consoleWarn": {
  //   "prefix": "cwa",
  //   "body": "console.warn('$0');",
  //   "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  // },
  // "consoleInfo": {
  //   "prefix": "cin",
  //   "body": "console.info('$0');",
  //   "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  // },
  // "consoleTable": {
  //   "prefix": "ctb",
  //   "body": "console.table(${1:object});",
  //   "description": "Displays tabular data as a table."
  // },
  // "consoleTime": {
  //   "prefix": "cti",
  //   "body": "console.time('${1:label}');",
  //   "description": "Sets starting point for execution time measurement"
  // },
  // "consoleTimeEnd": {
  //   "prefix": "cte",
  //   "body": "console.timeEnd('${1:label}');",
  //   "description": "Sets end point for execution time measurement"
  // },
  // "console time": {
  //   "prefix": "time",
  //   "body": [
  //     "console.time('${1:label}');",
  //     "$TM_SELECTED_TEXT",
  //     "console.timeEnd('${1:label}');"
  //   ],
  //   "description": "console.time/console.timeEnd to test wrapped code cost"
  // }
}