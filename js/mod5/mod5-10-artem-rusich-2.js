/************      –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã     **************** */

const array = [1, 2, 3];
console.log(array);
//–≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –º—ã —É–≤–∏–¥–∏–º —á—Ç–æ —É –º–∞—Å—Å–∏–≤–∞ –µ—Å—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –º–∞—Å—Å–∏–≤–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –µ—Å—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –æ–±—å–µ–∫—Ç–∞
//–ü—Ä–æ—Ç–æ—Ç–∏–ø–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤–µ—Ä—Ö—É –≤–Ω–∏–∑, –Ω–æ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
//–ü–µ—Ä–≤–æ–µ —á—Ç–æ –Ω–∞–π–¥–µ—Ç —Ç–æ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
//–ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–∞–µ—Ç —à–∞–≥ –≤–Ω–∏–∑

/******************************************************* */
const user = {
  name: 'test user a',
  age: 18,

  sayHello() {
    console.log(`sayHello ${this.name}`);
  },

  showAge() {
    console.log(`showAge ${this.age}`);
  },
};

//—Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –ø—Ä–æ—Ç–æ—Ç–∏–ø–Ω—ã–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –æ–±—å–µ–∫—Ç–∞ user

//1

const user1 = Object.create(user);
user1.name = 'user 1';
user1.sayHello();
user1.showAge();
console.log(user1);

//2

const user2 = Object.create(user);
user2.name = 'user 2';
user2.age = 20;
user2.showAge();
user2.sayHello();
console.log(user2);

//3

const user3 = {
  name: 'User 3',
  age: 50,
  sayHi() {
    console.log('say Hi', this.name);
  },
}

const admin = Object.create(user3);
admin.age = 19;
admin.name = 'Nick'
admin.showAge = function () {
  console.log('show Age', this.name, this.age);
};
admin.sayHi()
admin.showAge()

const practiceOwner = Object.create(admin);
practiceOwner.name = 'Owner';
practiceOwner.showAge()
practiceOwner.sayHi()
console.log(practiceOwner);

/*******   –ö–ª–∞—Å—Å—ã  ********* */

class User {
  //—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–µ –∏–¥—É—Ç –Ω–∞ –Ω–∞—à —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫–ª–∞—Å—Å–µ
  //–ø–∏—à–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —Å–æ —Å–ª–æ–≤–∞ static
  static counter = 0;
  static addUser() {
    // –º—ã –º–æ–∂–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–∞–∫ –¥–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ this –∏–ª–∏ –∏ –¥–æ –∫–ª–∞—Å—Å–∞ User
    // User.counter += 1;
    //–∏–ª–∏
    this.counter += 1;
    // console.log(`Number of users ${(this.counter += 1)}`);
    //–∏–ª–∏
    console.log(`Number of users ${(User.counter += 1 - 1)}`);
  }
  // –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, –∏–∑ –≤–Ω–µ –∏—Ö –≤—ã–∑–≤–∞—Ç—å –Ω–µ–ª—å–∑—è
  // –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–æ, —Ç–∞–∫–∂–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
  #location;
  // –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  // constructor(name, email, age = 18) {
  // –µ—Å–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º –∏ –Ω–µ —Ö–æ—Ç–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –æ–±—å–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ new –∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–ª–∞–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é 
  // –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫ –∂–µ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–∞—Ç–µ—Ä–Ω –æ–±—å–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  constructor({ name, email, age = 18, location = 'World', password } = {}) {
    this.name = name;
    this.email = email;
    this.age = age;
    this.#location = location;
    this.password = password;

    // –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É –º–µ—Ç–æ–¥—É(—Å–≤–æ–π—Å—Ç–≤—É) —á–µ—Ä–µ–∑ this —á—Ç–æ –±—ã –≤—ã–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ—Ç–æ–º—É —á—Ç–æ this —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –±—É–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –ø–æ—ç—Ç–æ–º—É –æ–±—Ä–∞—â–∞–µ–º—Å—è —á–µ—Ä–µ–∑ User(–∫–ª–∞—Å—Å)
    // this.addUser() = addUser();//‚ùå

    User.addUser();
  }
  sayHello() {
    // –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ –∫–ª–∞—Å—Å–µ –∏–¥—É—Ç –Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø
    console.log('say Hello', this.name);
  }

  // –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∞—Å—Å–∞–º–∏
  // –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞

  #getEmail() {
    console.log(this.email);
  }

  // get –∏ set —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞—Ä–µ
  // get b set –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ —Ä–∞–∑–ª–∏—á–Ω–æ–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
  // –ø–∞—Ä–∞ get –∏ set —Ä–∞–±–æ—Ç–∞—é—Ç —Å –æ–¥–Ω–∏–º —Å–≤–æ–π—Å—Ç–≤–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∫ –ø—Ä–∏–º–µ—Ä—É —Å #location
  get locale() {
    // get –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∏–∫–æ–≥–¥–∞ –æ–Ω —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    // –≤–µ—Ä–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–Ω–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    return this.#location;
  }

  set locale(city) {
    //—É —Å–µ—Ç—Ç–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä
    //—Å–µ—Ç–µ—Ä –∏–∑–º–µ–Ω–∏ –º–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    this.#location = city

    //–≤—ã–∑–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥–æ–≤
    this.#getEmail();

    /* const value = prompt('Enter password');
     if (value === this.password) {
       this.#location = city;
       console.log(this.#location);
       alert(this.#location)
     } else {
       confirm('–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–µ—à—å —Å–Ω–æ–≤–∞?')
       console.log('–•–∞—Ü–∫–µ—Ä? üò± –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ');
     }*/
  }
}

/*—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ User*/

// const test = new User('test', 'test@mail.net');
// //–µ—Å–ª–∏ –º—ã –Ω–µ –∑–Ω–∞–µ–º –∏ –Ω–µ —Ö–æ—Ç–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –æ–±—å–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ new –∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–ª–∞–µ–º –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é  
// test.sayHello();
// console.log(test)//age 18 –ø–æ–¥—Å—Ç–∞–≤–∏–ª–æ—Å—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

const test1 = new User({ name: 'test1', email: 'test1@gmail.net', age: 90 });
test1.sayHello();
// –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
// test1.#getEmail();//‚ùå
console.log(test1);//location: 'World' –ø–æ–¥—Å—Ç–∞–≤–∏–ª–æ—Å—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//—Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –Ω–∞ –æ–±—å–µ–∫—Ç–µ –∏ –æ–Ω –Ω–µ –ø–æ–ø–∞–¥–µ—Ç –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ç–æ –µ—Å—Ç—å –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—å—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º —Ç–æ–≥–æ –æ–±—å–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ —Å–æ–∑–¥–∞–ª –∏ –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑  –∞ –Ω–µ –Ω–∞–æ–±–æ—Ä–æ—Ç
//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤ new –æ–±—å–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –≤ –æ–±—å–µ–∫—Ç
test1.addHobby = function (args) {
  this.hobby = args
}
test1.addHobby('dog')
//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –æ–±—å–µ–∫—Ç
test1.hobby = 'dog'
console.log(test1.email);
// console.log(test1.#location);//SyntaxError, Private
//–∫–∞–∫ –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞
//—ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø –∫  –º–µ—Ç–æ–¥–∞ get —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ 

//–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å–≤–æ–π—Å—Ç–≤—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ get location 
console.log(test1.locale)//–ø–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ World
console.log(test1);


//—Å–≤–æ–π—Å—Ç–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞ –º–µ—Ç–æ–¥—ã –∏–¥—É—Ç –Ω–∞ –ø—Ä–æ—Ç–æ—Ç–∏–ø –∏ –æ—Å—Ç–∞—é—Ç—å—Å—è –≤ –∫–ª–∞—Å—Å–µ
//—Å–≤–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –æ–±—å–µ–∫—Ç –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ 
const test2 = new User({
  name: 'test2',
  email: 'test2@mail.net',
  location: 'Lviv',
  password: 'Asbv178456',
  //–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–±—å–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –ø–æ—Ç–æ–º—É –∫–∞–∫ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ 
  newValue: true,
});

test2.sayHello();
//–ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ set location 
test2.locale = 'Dnipro';
console.log(test2);
//–æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É –º–µ—Ç–æ–¥—É –∫–ª–∞—Å—Å–∞
console.log(test2.constructor.counter)

/************* –ù–∞—Å–ª–∞–¥–æ–≤–∞–Ω–µ ************* */

class Avatar extends User {
  //extends –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–≤–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
  constructor({ name, email, location, password, age, damage }) {
    // super (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞). —Å–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
    super({
      name,
      email,
      location,
      password,
      age,
    });
    //—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∞
    this.damage = damage;
  }
  attack() {
    console.log(`${this.name} Attack with damage ${this.damage}`);
  }
}

const test3 = new Avatar({
  name: 'test3',
  email: 'test2@mail.net',
  location: 'Lviv',
  password: 'Asbv178456',
  newValue: true,
  damage: 200,
});

console.log(test3.constructor.counter)
test3.attack();

class Zombi extends User {
  // —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
  constructor({ poison, ...args }) {
    super({ ...args });
    this.poison = poison;
  }

  toBite() {
    console.log(`${this.name} Bite with ${this.poison}`);
  }
}

const test4 = new Zombi({
  name: 'test 4',
  poison: 500,
})
test4.toBite()

//—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Zombie
class Dog extends Zombi {
  constructor(...args) {
    super({ ...args });
  }
}
const test5 = new Dog({})

console.log(test5);


// Example 1 - –ë–ª–æ–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

class Blogger {
  constructor({ name, age, numberOfPosts, topics, email }) {
    this.name = name;
    this.email = email;
    this.age = age;
    this.numberOfPosts = numberOfPosts;
    this.topics = topics;
  }
  getInfo() {
    return `User ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts.`;
  }
  updatePostCount(value) {
    this.numberOfPosts += value;
  }
  getEmail() {
    return this.email
  }
}

const mango = new Blogger({
  name: 'Mango',
  email: 'mango@mail.com',
  age: 24,
  numberOfPosts: 20,
  topics: ['tech', 'cooking'],
});

console.log(mango);
console.log(mango.getInfo()); // User Mango is 24 years old and has 20 posts
mango.updatePostCount(5);
console.log(mango.getInfo()); // User Mango is 24 years old and has 25 posts
console.log(mango.getEmail());

const poly = new Blogger({
  name: 'Poly',
  email: 'poly@mail.com',
  age: 19,
  numberOfPosts: 17,
  topics: ['sports', 'gaming', 'health'],
});

console.log(poly.getInfo()); // User Poly is 19 years old and has 17 posts
poly.updatePostCount(4);
console.log(poly.getInfo()); // User Poly is 19 years old and has 21 posts

// Example 2 - –°—Ö–æ–≤–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:

// getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.

//–û–ø–µ—Ä–∞—Ç–æ—Ä ~ (Bitwise NOT) –ó–∞–º–µ–Ω—è–µ—Ç –±–∏—Ç—ã –æ–ø–µ—Ä–∞–Ω–¥–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ.
console.log(~1);//-2

//~15	= -16. –¥–≤–æ–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ - 	~``00000000...``00001111 = ``1111``1111``...``11110000

//~0 = -1
//~-1= 0
//~1 = -2

// -(x + 1)

//–µ–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω–¥–µ–∫—Å 0 if –µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç
// 0 => false
// -(-1 + 1) => -0 => false

//indexOf –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ -1 –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ true
// -1 => true
// -(0 + 1) => -1 => true

//!! –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Boolean
//!! —Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ Boolean(0)
console.log(Boolean(0));//false
console.log(!0); //Boolean(0) true
console.log(!!0); //Boolean(0) false
console.log(!!!0); //Boolean(0) true


class Storage {
  constructor(items) {
    this.items = items;
  }
  getItems() {
    return this.items;
  }
  addItem(item) {
    if (!this.items.includes(item)) {
      this.items.push(item);
      return;
    }
    console.log('–¢–∞–∫–∏–π —Ç–æ–≤–∞—Ä –≤–∂–µ —î');
  }
  removeItem(item) {
    const idx = this.items.indexOf(item);
    // if (this.items.includes(item)) {
    //—Ç–æ–∂–µ —Å–∞–º–æ–µ —á—Ç–æ –∏ 
    if (!!~idx) {
      //!!~idx - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —É–¥–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è indexOf
      //!! - —Å—Ä–∞–∑—É –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ boolean
      //—Ç–æ —á—Ç–æ –±—ã–ª–æ 0 —Å—Ç–∞–Ω–µ—Ç -1, –∞ —Ç–æ —á—Ç–æ –±—ã–ª–æ -1 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–æ 0
      this.items.splice(idx, 1);//1 -–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    }
  }
}

const storage = new Storage(['üçé', 'üçã', 'üçâ', 'üçá', 'üçë', 'üçí']);
const items = storage.getItems();
console.table(items);

storage.addItem('üçå');
console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

storage.removeItem('üçã');
console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email.

class User1 {
  #login;
  #email;
  constructor({ login, email }) {
    this.#login = login;
    this.#email = email;
  }
  get login() {
    //–µ—Å–ª–∏ login –±—É–¥–µ—Ç –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω call stack
    //–ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ set –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–Ω –Ω–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∞ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –≤–Ω–æ–≤—å –∫ get –∏  set, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é
    return this.#login;
    //–µ—Å–ª–∏ —É –Ω–∞—Å —Å–≤–æ–π—Å—Ç–≤–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Ç–æ –º–æ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    //–µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
  }
  set login(newLogin) {
    if (this.#login !== newLogin) {
      this.#login = newLogin;
    }
  }
  get email() {
    return this.#email;
  }
  set email(newEmail) {
    if (this.#email !== newEmail) {
      this.#email = newEmail;
    }
  }
}

const mango1 = new User1({
  login: 'Mango',
  email: 'mango@dog.woof',
});
const poly1 = new User1({
  login: 'Poly',
  email: 'poly@mail.com',
});

// mongo1.login = 'a';
console.log(mango1.login); // Mango
mango1.login = 'Mangrove';
console.log(mango1.login); // Mangrove

console.log(poly1.login); // Poly
poly1.login = 'Pollucite';
console.log(poly1.login); // Pollucite



// Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updateNote(text, newPriority).

class Notes {
  static Priority = {
    LOW: 'low',
    NORMAL: 'normal',
    HIGH: 'high',
  };
  constructor(note) {
    this.items = note;
  }

  addNote(note) {
    const inArr = this.items.some(({ text }) => text === note.text);
    if (!inArr) {
      this.items.push(note);
    }
  }
  removeNote(text) {
    const idx = this.items.findIndex(({ text: noteText }) => noteText === text);
    if (!!~idx) {
      //idx !== -1  idx > -1
      this.items.splice(idx, 1);
    }
  }
  updateNote(text, newPriority) {
    const idx = this.items.findIndex(({ text: noteText }) => noteText === text);
    if (!!~idx) {
      //idx !== -1  idx > -1
      this.items[idx].priority = newPriority;
    }
  }
}

const myNotes = new Notes([]);
myNotes.addNote({
  text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞',
  priority: Notes.Priority.LOW,
});
myNotes.addNote({
  text: ['–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞'],
  priority: Notes.Priority.LOW,
});
myNotes.addNote({
  text: '–ú–æ—è —Ç—Ä–µ—Ç—è –∑–∞–º—ñ—Ç–∫–∞',
  priority: Notes.Priority.LOW,
});
console.log(myNotes.items);

myNotes.addNote({
  text: '–ú–æ—è —á–µ—Ç–≤–µ—Ä—Ç–∞ –∑–∞–º—ñ—Ç–∫–∞',
  priority: Notes.Priority.NORMAL,
});
console.log(myNotes.items);

myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
console.log(myNotes.items);

myNotes.updateNote('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
console.log(myNotes.items);

// –°–∞–º–æ—Å—Ç—ñ–π–Ω–µ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è
// –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Toggle —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {isOpen: boolean} —ñ –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å on - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ on –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ false.

class Toggle {
  constructor({ isOpen = false} = {}) {
    this.isOpen = isOpen
  }
  toggle() {
    return this.isOpen
  }
}
const firstToggle = new Toggle({ isOpen: true });

console.group('firstToggle');
console.log(firstToggle.on);
firstToggle.toggle();
console.log(firstToggle.on);
console.groupEnd('firstToggle');

const secondToggle = new Toggle();
console.group('secondToggle');
console.log(secondToggle.on);
secondToggle.toggle();
console.log(secondToggle.on);
console.groupEnd('secondToggle');

/************************************************ */
// const str = 'Hello world'
// console.dir(typeof str)

// String.prototype.sayTest = function (name) {
//   console.log(`Hello from prototype ${name}`);
// }
// str.sayTest('Artem')

// const arr = [1, 2, 3, 4, 5, 6]
// Array.prototype.customEach = function (arr) {
//   for (let index = 0; index < arr.length; index++) {
//     const element = arr[index]
//     console.log(element);
//   }
//   console.log('‚ù§');
// }
// arr.customEach(arr)


