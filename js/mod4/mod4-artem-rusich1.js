// @@ -0,0 +1,483 @@
// http://xn--80adth0aefm3i.xn--j1amh/%D0%BF%D1%83%D0%B1%D0%BB%D1%96%D0%BA%D0%B0%D1%86%D1%96%D1%8F/21
//[P]callback

function foo(a, b) {
  console.log(a, b);
}
console.log(foo);
foo(5, 10)

function boo(callback) {
  console.log('callback', callback);
  callback(10);
}

function logger(value) {
  console.log(value);
}

const numb = 10;
console.log(numb);

console.log('logger', logger);
boo(logger);


const arr = [2, 6, 1, 7, 3];
//–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
function add(arr) {
  let total = arr[0];
  for (let i = 1; i < arr.length; i += 1) {
    total += arr[i];
  }
  return total;
}

function sum(arr) {
  let total = arr[0];
  for (let i = 1; i < arr.length; i += 1) {
    total *= arr[i];
  }
  return total;
}

function division(arr) {
  let total = arr[0];

  for (let i = 1; i < arr.length; i += 1) {
    total /= arr[i]
  }
  return total
}

console.log(add(arr));
console.log(sum(arr));
console.log(division(arr));

//–Ω–∞–ø–∏—Å–∞–Ω–∏–µ callback —Ñ—É–Ω–∫—Ü–∏–∏
function each(arr, callback) {
  let total = arr[0];
  for (let i = 1; i < arr.length; i += 1) {
    total = callback(total, arr[i]);
  }
  return total;
}

function add(first, second) {
  return first + second;
}

function sum(first, second) {
  return first * second;
}

function division(first, second) {
  return first / second;
}
console.log(each(arr, add));
console.log(each(arr, sum));
console.log(each(arr, division));

//–µ—Å–ª–∏ item –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤  –∫–æ–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—É—Ç–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ _ –Ω–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ –ª–∏–Ω—Ç–µ—Ä–∞—Ö
arr.forEach(function (_, idx, arr) {
  console.log(_); //item
  console.log(idx); //index
  console.log(arr); //arr
});
console.log(arr);

// item -—ñ—Ç–µ—Ä—É—î–º–∏–π –µ–ª–µ–º–µ–Ω—Ç
// idx -—ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// arr - –º–∞—Å–∏–≤ —è–∫–∏–π —ñ—Ç–µ—Ä—É—î–º–æ
//forEach - –º—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏—Å–≤–æ–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

arr.forEach(function (item, idx, arr) {
  arr[idx] = item * 2;
  console.log(item);
  console.log(idx);
  console.log(arr);
});

arr.forEach(function (item, i) {
  console.log(`work with number ${item}`);
  arr[i] = item * 2;
});

console.log(arr);

const Array = {
  forEach() { },
};
console.log(arr);

function each(arr, callback) {
  let total = arr[0];
  for (let i = 1; i < arr.length; i += 1) {
    total = callback(total, arr[i]);
  }
  return total;
}
console.log(each(arr, add));
console.log(each(arr, sum));
console.log(each(arr, division));

function add(first, second) {
  return first + second;
}

function sum(first, second) {
  return first * second;
}

function division(first, second) {
  return first / second;
}

// hoistin
// declaration
// fooo();
// function fooo() {}

// expression
const coo = function () { };
coo();

// arrow
// arguments - –≤—ñ–¥—Å—É—Ç–Ω—ñ–π;
const fooo = (...rest) => {
  console.log(rest);
};
fooo(1, 2, 3, 4, 5);
fooo(1, 2, 3, 4, 21, 532, 5324, 5);

const arR = [2, 6, 1, 7, 3];

const adD = (first, second) => first + second;
const multiply = (first, second) => first * second;
const multiply1 = (first, second) => {
  return first * second
};
// const division = (first, second) => first / second;

function each(arr, callback) {
  let total = arr[0];
  for (let i = 1; i < arr.length; i += 1) {
    total = callback(total, arr[i]);
  }
  return total;
}

console.log(each(arR, add));
console.log(each(arR, multiply));
console.log(each(arR, division));

// function foo() {}
// const boo = () => {};
const user = {
  userName: 'Test user',
  say() {
    console.log(`Hello ${this}`);
  },
  sayHello: () => {
    //this –≤ —Ç–µ–ª–µ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—å–µ–∫—Ç–∞ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–Ω—É—Ç—Ä–∏ –æ–±—å–µ–∫—Ç–∞ –∞ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—å–µ–∫—Ç –≤ —Ü–µ–ª–æ–º
    console.log(`Hello ${this}`);
  },
};
user.say();
user.sayHello();

// –ü–µ—Ä–µ—Ä–≤–∞ –¥–æ 21.20

//[P]Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å
// // –†—ñ—à–µ–Ω–Ω—è

function createProduct(obj, callback) {
  const product = {
    id: Date.now(),
    ...obj,
  };
  callback(product);
}

function logProduct(obj) {
  console.log(`Product ${obj.name}`);
}

function logTotalPrice({ price, quantity }) {
  console.log(`Total price ${price * quantity}`);
}

createProduct(
  {
    name: 'üçé',
    price: 30,
    quantity: 3,
  },
  logProduct
);
createProduct(
  {
    name: 'üçã',
    price: 20,
    quantity: 5,
  },

  logTotalPrice
);

//[P]Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –î–æ–¥–∞–π—Ç–µ –≤ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw(amount, onSuccess, onError) —Ç–∞ deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –†—ñ—à–µ–Ω–Ω—è

const TRANSACTION_LIMIT = 1000;

const account = {
  username: 'Jacob',
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`TRANSACTION LIMIT ${TRANSACTION_LIMIT}`);
      return;
    } else if (this.balance < amount) {
      onError('Not enough in the account');
      return;
    }
    this.balance -= amount;
    onSuccess(`Transaction complete ${amount}, balance ${this.balance}.`);
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`TRANSACTION LIMIT ${TRANSACTION_LIMIT} `);
      return;
    } else if (amount <= 0) {
      onError(`Nice try Bro üòÇ`);
      return;
    }
    this.balance += amount;
    onSuccess(`Added ${amount}, balance ${this.balance}`);
  },
};

function handleSuccess(message) {
  console.log(`‚úî Success! ${message}`);
}

function handleError(message) {
  console.log(`‚úñ Error! ${message}`);
}

account.withdraw(2000, handleSuccess, handleError);
account.withdraw(600, handleSuccess, handleError);
account.withdraw(300, handleSuccess, handleError);
account.deposit(1700, handleSuccess, handleError);
account.deposit(0, handleSuccess, handleError);
account.deposit(-600, handleSuccess, handleError);
account.deposit(600, handleSuccess, handleError);

//[P]Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

// –†—ñ—à–µ–Ω–Ω—è
// function each(array, callback) { }

console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value * 2;
  })
);
console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return value - 10;
  })
);
console.log(
  each([64, 49, 36, 25, 16], function (value) {
    return Math.sqrt(value);
  })
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.ceil(value);
  })
);
console.log(
  each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
    return Math.floor(value);
  })
);

//[P]Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

function createProduct(obj, callback) {
  const product = {
    id: Date.now(),
    ...obj,
  };
  callback(product);
}

function logProduct(obj) {
  console.log(`Product ${obj.name}`);
}

function logTotalPrice({ price, quantity }) {
  console.log(`Total price ${price * quantity}`);
}

createProduct(
  {
    name: 'üçé',
    price: 30,
    quantity: 3,
  },
  logProduct
);
createProduct(
  {
    name: 'üçã',
    price: 20,
    quantity: 5,
  },
  logTotalPrice
);

//—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
const createProduct1 = (partialProduct, callback) => {
  const product = {
    id: Date.now(),
    ...partialProduct
  };
  callback(product);
}

const createProduct2 = (partialProduct, callback) =>
  callback({
    id: Date.now(),
    ...partialProduct,
  });

const logProduct1 = product => console.log(product.name);
const logTotalPrice1 = ({ price, quantity }) => console.log(price * quantity);

createProduct(
  {
    name: 'üçé',
    price: 30,
    quantity: 3,
  },
  logProduct
);
createProduct(
  {
    name: 'üçã',
    price: 20,
    quantity: 5,
  },
  logTotalPrice
);

//[P]Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–±–µ–∫—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

const TRANSACTION_LIMIT1 = 1000;

const account1 = {
  username: 'Jacob',
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT1) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT1} credits`);
    } else if (amount > this.balance) {
      onError(`Amount can't exceed account balance of ${this.balance} credits`);
    } else {
      this.balance -= amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT1) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT1} credits`);
    } else if (amount <= 0) {
      onError(`Amount must be more than 0 credits`);
    } else {
      this.balance += amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
};

const handleSuccess1 = message => console.log(`‚úÖ Success! ${message}`);
const handleError1 = message => console.log(`‚ùå Error! ${message}`);

account1.withdraw(2000, handleSuccess1, handleError1);
account1.withdraw(600, handleSuccess1, handleError1);
account1.withdraw(300, handleSuccess1, handleError1);
account1.deposit(1700, handleSuccess1, handleError1);
account1.deposit(0, handleSuccess1, handleError1);
account1.deposit(-600, handleSuccess1, handleError1);
account1.deposit(600, handleSuccess1, handleError1);

//[P]—äExample 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

function each(array, callback) {
  const newArr = [];
  for (const el of array) {
    newArr.push(callback(el));
  }
  return newArr;
}

console.log(each([64, 49, 36, 25, 16], value => value * 2));
console.log(each([64, 49, 36, 25, 16], value => value - 10));
console.log(each([64, 49, 36, 25, 16], value => Math.sqrt(value)));
console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));
console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));


//[P]Example 7 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

function logItems(items) {
  console.log(items);
  for (let i = 0; i < items.length; i += 1) {
    console.log(`${i + 1} - ${items[i]}`);
  }
}
//–∏–ª–∏
const logItems1 = arr => arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`))

logItems(['Mango', 'Poly', 'Ajax']);
logItems1(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

//[P]Example 8 - –ú–µ—Ç–æ–¥ forEach
// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

function cal—ÅulateAverage(...args) {
  let total = 0;
  for (let i = 0; i < args.length; i++) {
    total += args[i];
  }
  return total / args.length;
}
//–∏–ª–∏
const cal—ÅulateAverage1 = (...arr) => {
  let total = 0;
  arr.forEach(value => (total += value));
  return total / arr.length;
};

console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
console.log(cal—ÅulateAverage(14, 8, 2)); // 8
console.log(cal—ÅulateAverage1(27, 43, 2, 8, 36)); // 23.2
